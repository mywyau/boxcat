name: Create Release on Merge

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the main branch

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT }}
        fetch-depth: 0  # Fetch all history for tags

    - name: Fetch all tags
      run: git fetch --tags

    - name: Get latest tag
      id: get_latest_tag
      run: echo "latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

    - name: Print latest tag
      run: echo "The latest tag is ${{ env.latest_tag }}"

    - name: Set up Git
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'

    - name: Calculate new version
      id: calculate_version
      run: |
        latest_version=${{ env.LATEST_TAG }}
        if [ -z "$latest_version" ]; then
          latest_version="v0.0.3"
        fi
        latest_version=${latest_version#v}  # Remove the leading 'v'
        IFS='.' read -ra ADDR <<< "$latest_version"
        major=${ADDR[0]}
        minor=${ADDR[1]}
        patch=${ADDR[2]}
        new_patch=$((patch + 1))
        new_version="$major.$minor.$new_patch"

        # Check if the new tag already exists
        if git rev-parse "v${new_version}" >/dev/null 2>&1; then
          # Increment patch if tag exists
          new_patch=$((new_patch + 1))
          new_version="$major.$minor.$new_patch"
        fi

        echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

    - name: Create and push new tag
      env:
        NEW_VERSION: ${{ env.NEW_VERSION }}
      run: |
        git tag "v${NEW_VERSION}"
        git push https://github-actions:${{ secrets.PAT }}@github.com/mywyau/boxcat.git "v${NEW_VERSION}"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/*
        asset_name: my_package-${{ github.ref }}.tar.gz
        asset_content_type: application/gzip