name: Create Release on Merge

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the main branch

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT }}
        fetch-depth: 0  # Fetch all history for tags

    - name: Show latest tag
      run: echo "Latest tag is ${{ github.ref }}"

    - name: Set up Git
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'

    - name: Get the latest tag
      id: get_latest_tag
      run: |
        latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.3")
        echo "LATEST_TAG=${latest_tag}" >> $GITHUB_ENV
        echo "LATEST_TAG=${latest_tag}"

    - name: Calculate new version
      id: calculate_version
      run: |
        latest_version=${{ env.LATEST_TAG }}
        if [ -z "$latest_version" ]; then
          latest_version="v0.0.3"
        fi
        latest_version=${latest_version#v}  # Remove the leading 'v'
        IFS='.' read -ra ADDR <<< "$latest_version"
        major=${ADDR[0]}
        minor=${ADDR[1]}
        patch=${ADDR[2]}
        new_patch=$((patch + 1))
        new_version="$major.$minor.$new_patch"

        # Check if the new tag already exists
        if git rev-parse "v${new_version}" >/dev/null 2>&1; then
          # Increment patch if tag exists
          new_patch=$((new_patch + 1))
          new_version="$major.$minor.$new_patch"
        fi

        echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

    - name: Clean workspace
      run: |
        rm -rf dist/ build/

    - name: Update version in setup.py
      run: |
        sed -i "s/version='.*'/version='${{ env.NEW_VERSION }}'/" setup.py
        cat setup.py

    - name: Update version in pyproject.toml
      run: |
        sed -i "s/version='.*'/version='${{ env.NEW_VERSION }}'/" pyproject.toml 
        cat pyproject.toml


    - name: Create and push new tag
      env:
        NEW_VERSION: ${{ env.NEW_VERSION }}
      run: |
        git tag "v${NEW_VERSION}"
        git push https://github-actions:${{ secrets.PAT }}@github.com/mywyau/boxcat.git "v${NEW_VERSION}"

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine

    - name: Build package
      run: |
        python setup.py sdist bdist_wheel

    - name: Publish package to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
